#include "ReadWriter.h"
//iostream, fstream включены в ReadWriter.h
using namespace std;

//Можно создавать любое количество любых вспомогательных классов, структур и методов для решения задачи.
int heap_size;
int depth = 0;
int maxDepth = 0;

int left(int i) {
    return 2 * i + 1;
}

int right(int i) {
    return 2 * i + 2;
}

void heapify(int *numbers, int i, int array_size) {
    int largest;
    if (left(i) < heap_size && numbers[left(i)] > numbers[i]) {
        largest = left(i);
    } else {
        largest = i;
    }
    if (right(i) < heap_size && numbers[right(i)] > numbers[largest]) {
        largest = right(i);
    }
    if (largest != i) {
        int temp = numbers[i];
        numbers[i] = numbers[largest];
        numbers[largest] = temp;
        if (!(right(i) >= heap_size || left(largest) >= heap_size)) {
            depth++;
            heapify(numbers, largest, array_size);
        }
    }
}

void buildHeap(int *numbers, int array_size) {
    heap_size = array_size;
    for (int i = array_size / 2 - 1; i >= 0; i--) {
        depth = 0;
        heapify(numbers, i, array_size);
        if (depth > maxDepth) {
            maxDepth = depth;
        }
    }
}

int main() {
    //Объект для работы с файлами
    ReadWriter rw;

    int *brr = nullptr;
    int n;

    //Ввод из файла
    n = rw.readInt();

    brr = new int[n];
    rw.readArray(brr, n);

    buildHeap(brr, n);

    //Запуск сортировки, ответ в том же массиве (brr)
    rw.writeInt(maxDepth);

    //Запись в файл
    rw.writeArray(brr, n);

    //освобождаем память
    delete[] brr;

    return 0;
}


